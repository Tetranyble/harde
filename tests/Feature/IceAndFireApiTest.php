<?php

namespace Tests\Feature;

use App\Http\Clients\IceAndFireClient;
use App\Services\IceAndFireApiService;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class IceAndFireApiTest extends TestCase
{
    /**
     * @var \Illuminate\Contracts\Foundation\Application
     */
    private $iceService;
    /**
     * @var void
     */
     private $mockHandler;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //$this->mockHandler = $this->swapIceAndFireClient();
        $this->iceService =  app(IceAndFireApiService::class);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_fetching_books()
    {
//        $response = $this->get('/');
//
//        $response->assertStatus(200);
//        $this->mockHandler->append(new Response(200, [], json_encode([
//            "status" => "success",
//            "status_code" => 200,
//            "data" => [
//                [
//                "name" => "A Game of Thrones",
//                "isbn" => "978-0553103540",
//                "authors" => [
//                    "George R. R. Martin"
//                ],
//                "number_of_pages" => 694,
//                "publisher "=> "Bantam Books",
//                "country" => "United States",
//                "release_date" => "1996-08-01T00:00:00",
//            ]
//            ]
//
//        ])));
        $books =  $this->iceService->books();
        $this->assertCount(10, $books);
    }

    private function swapIceAndFireClient(){
        $mockHandler = new MockHandler();
        $client = new IceAndFireClient([
            'handler' => HandlerStack::create($mockHandler)
        ]);

        $this->app->instance(IceAndFireClient::class, $client);
        return $mockHandler;
    }
}
