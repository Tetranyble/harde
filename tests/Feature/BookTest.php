<?php

namespace Tests\Feature;

use App\Models\Book;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class BookTest extends TestCase
{
    use WithFaker, RefreshDatabase;
    private $attributes;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->attributes = $this->attributes();
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */

    /** @test */
    public function a_user_can_create_a_book(){
        $this->withExceptionHandling();
        $attributes = $this->attributes;

        $this->post('/api/v1/books', $attributes)->assertStatus(201);
        $this->assertDatabaseHas('authors',['name' => $attributes['authors'][0]]);
        unset($attributes['authors']);
        $this->assertDatabaseHas('books',$attributes);
        $this->get('/books')->assertSee($attributes['name']);
    }

    /** @test */
    public function ensure_json_response_structure(){
        $this->post('/api/v1/books', $this->attributes)->assertJsonStructure($this->jsonStructure());

    }

    /** @test */
    public function a_book_requires_a_name(){
        $attributes = Book::factory()->raw(['name' => '']);
        $this->post('/api/v1/books', $attributes)->assertSessionHasErrors('name');
    }
    /** @test */
    public function a_book_requires_an_authors(){
        $attributes = Book::factory()->raw(['authors' => '']);
        $this->post('/api/v1/books', $attributes)->assertSessionHasErrors('authors');
    }

    /** @test */
    public function a_book_requires_an_isbn(){
        $attributes = Book::factory()->raw(['isbn' => '']);
        $this->post('/api/v1/books', $attributes)->assertSessionHasErrors('isbn');
    }

    /** @test */
    public function a_book_requires_a_number_of_pages(){
        $attributes = Book::factory()->raw(['number_of_pages' => '']);
        $this->post('/api/v1/books', $attributes)->assertSessionHasErrors('number_of_pages');
    }

    /** @test */
    public function a_book_requires_a_publisher(){
        $attributes = Book::factory()->raw(['publisher' => '']);
        $this->post('/api/v1/books', $attributes)->assertSessionHasErrors('publisher');
    }

    /** @test */
    public function a_book_requires_a_release_date(){
        $attributes = Book::factory()->raw(['release_date' => '']);
        $this->post('/api/v1/books', $attributes)->assertSessionHasErrors('release_date');
    }
    /** @test */
    public function a_book_requires_a_country(){
        $attributes = Book::factory()->raw(['country' => '']);
        $this->post('/api/v1/books', $attributes)->assertSessionHasErrors('country');
    }

    /** @test */
    public function a_user_can_view_a_book(){
        //$this->withoutExceptionHandling();
        $book = Book::factory()->create();
        $this->get($book->path())
            ->assertSee($book->name)
            ->assertSee($book->release_date)
            ->assertSee($book->authors)
            ->assertSee($book->number_of_pages)
            ->assertSee($book->country)
            ->assertSee($book->publisher)
            ->assertSee($book->release_date);
    }

    /** @test */
    public function a_book_has_a_path(){
        $book = Book::factory()->create();
        $this->assertEquals('/api/v1/books/' . $book->id, $book->path());
    }

    /** @test */
    public function a_user_can_delete_a_book(){
        $this->withoutExceptionHandling();
        $book = Book::factory()->create();
        //$this->post('/api/v1/books', $)->assertStatus(201);
        $this->delete('/api/v1/books/'. $book['id']);
        $this->assertDatabaseMissing('books', $book->toArray());

    }

    private function attributes(){
        return [
            'name' => $this->faker->sentence(),
            'isbn' => $this->faker->isbn10(),
            'country' => $this->faker->country(),
            'number_of_pages' => $this->faker->numberBetween(100, 400),
            'publisher' => $this->faker->company(),
            'release_date' => $this->faker->date,
            'authors' => [
                $this->faker->name
            ]
        ];
    }
    private function jsonStructure(){
        return [
            'status_code',
            'status',
            'data' => [
                'book' => [
                    'name' ,
                    'isbn',
                    'authors' ,
                    'number_of_pages' ,
                    'publisher' ,
                    'country' ,
                    'release_date'
                ]
            ]
        ];
    }
}
